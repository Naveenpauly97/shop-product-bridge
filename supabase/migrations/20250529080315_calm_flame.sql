/*
  # Fix user_profiles table schema

  1. Changes
    - Drop existing user_profiles table and recreate with correct structure
    - Add UUID primary key linked to auth.users
    - Add profile_picture and country columns
    - Remove redundant password and user_email columns (managed by auth.users)
    - Enable RLS policies

  2. Security
    - Enable RLS on user_profiles table
    - Add policies for users to manage their own profiles
*/

-- Drop existing table and recreate with correct structure
DROP TABLE IF EXISTS user_profiles;

create table public.user_profiles (
  id bigint generated by default as identity not null,
  user_id uuid,
  created_at timestamp with time zone not null default now(),
  user_name character varying null,
  password character varying null,
  user_email character varying null,
  profile_picture text null,
  country text null default 'INR'::text,
  updated_at timestamp with time zone null default now(),
  FOREIGN KEY (user_id) REFERENCES auth.users(id),
  constraint user_profiles_pkey primary key (id)
) TABLESPACE pg_default;

-- Enable RLS
ALTER TABLE user_profiles ENABLE ROW LEVEL SECURITY;

-- Create policies
CREATE POLICY "Users can view own profile"
  ON user_profiles
  FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

CREATE POLICY "Users can update own profile"
  ON user_profiles
  FOR UPDATE
  TO authenticated
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can insert own profile"
  ON user_profiles
  FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);

-- Create trigger to update the updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_user_profiles_updated_at
  BEFORE UPDATE ON user_profiles
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();