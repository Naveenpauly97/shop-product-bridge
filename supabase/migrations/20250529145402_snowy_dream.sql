/*
  # Fix user_profiles table schema and RLS policies

  1. Changes
    - Drop existing user_profiles table and recreate with correct structure
    - Add UUID primary key linked to auth.users with UNIQUE constraint
    - Add profile_picture and country columns
    - Remove redundant password and user_email columns (managed by auth.users)
    - Enable RLS policies for both table and storage

  2. Security
    - Enable RLS on user_profiles table
    - Add policies for users to manage their own profiles
    - Add storage policies for profile images
*/

-- Drop existing table and recreate with correct structure
DROP TABLE IF EXISTS user_profiles;

create table public.user_profiles (
  id bigint generated by default as identity not null,
  user_id uuid not null unique references auth.users(id),
  created_at timestamp with time zone not null default now(),
  user_name character varying null,
  profile_picture text null,
  country text null default 'US'::text,
  updated_at timestamp with time zone null default now(),
  constraint user_profiles_pkey primary key (id)
) TABLESPACE pg_default;

-- Enable RLS
ALTER TABLE user_profiles ENABLE ROW LEVEL SECURITY;

-- Create policies
CREATE POLICY "Users can view own profile"
  ON user_profiles
  FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own profile"
  ON user_profiles
  FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own profile"
  ON user_profiles
  FOR UPDATE
  TO authenticated
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

-- Create trigger to update the updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ language 'plpgsql';

DROP TABLE IF EXISTS products;

create table public.products (
  prdt_id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  prdt_name character varying null,
  prdt_desc character varying null,
  ownr_id text null,
  product_category character varying(100) null,
  product_price numeric(10, 2) null,
  product_stock integer null default 0,
  product_sku character varying(100) null,
  product_image_url text null,
  product_status character varying(20) null default 'active'::character varying,
  constraint products_pkey primary key (prdt_id)
) TABLESPACE pg_default;

CREATE TRIGGER update_user_profiles_updated_at
  BEFORE UPDATE ON user_profiles
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

-- Storage policies for profile images
BEGIN;
  -- Enable RLS on the storage.objects table
  ALTER TABLE storage.objects ENABLE ROW LEVEL SECURITY;

  -- Policy to allow authenticated users to upload their own profile pictures
  CREATE POLICY "Users can upload own profile pictures"
    ON storage.objects
    FOR INSERT
    TO authenticated
    WITH CHECK (
      bucket_id = 'profile-images' AND
      (storage.foldername(name))[1] = auth.uid()::text
    );

  -- Policy to allow users to read their own profile pictures
  CREATE POLICY "Users can read own profile pictures"
    ON storage.objects
    FOR SELECT
    TO authenticated
    USING (
      bucket_id = 'profile-images' AND
      (storage.foldername(name))[1] = auth.uid()::text
    );

  -- Policy to allow users to update their own profile pictures
  CREATE POLICY "Users can update own profile pictures"
    ON storage.objects
    FOR UPDATE
    TO authenticated
    USING (
      bucket_id = 'profile-images' AND
      (storage.foldername(name))[1] = auth.uid()::text
    );

  -- Policy to allow users to delete their own profile pictures
  CREATE POLICY "Users can delete own profile pictures"
    ON storage.objects
    FOR DELETE
    TO authenticated
    USING (
      bucket_id = 'profile-images' AND
      (storage.foldername(name))[1] = auth.uid()::text
    );
COMMIT;


-- test database reference

/*
DROP TABLE IF EXISTS user_profiles;

create table public.user_profiles (
  id bigint generated by default as identity not null,
  user_id uuid not null unique references auth.users(id),
  created_at timestamp with time zone not null default now(),
  user_name character varying null,
  profile_picture text null,
  country text null default 'US'::text,
  updated_at timestamp with time zone null default now(),
  constraint user_profiles_pkey primary key (id)
) TABLESPACE pg_default;

-- Enable RLS
ALTER TABLE user_profiles ENABLE ROW LEVEL SECURITY;

-- Create policies
CREATE POLICY "Users can view own profile"
  ON user_profiles
  FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own profile"
  ON user_profiles
  FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own profile"
  ON user_profiles
  FOR UPDATE
  TO authenticated
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

-- Create trigger to update the updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_user_profiles_updated_at
  BEFORE UPDATE ON user_profiles
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

-- Storage policies for profile images
BEGIN;
  -- Enable RLS on the storage.objects table
  ALTER TABLE storage.objects ENABLE ROW LEVEL SECURITY; -- this line shows must be owner of table objects -> solved by created new storage.objects also created storage.profile-images manually in storage 

  -- Policy to allow authenticated users to upload their own profile pictures
  CREATE POLICY "Users can upload own profile pictures"
    ON storage.objects
    FOR INSERT
    TO authenticated
    WITH CHECK (
      bucket_id = 'profile-images' AND
      (storage.foldername(name))[1] = auth.uid()::text
    );

  -- Policy to allow users to read their own profile pictures
  CREATE POLICY "Users can read own profile pictures"
    ON storage.objects
    FOR SELECT
    TO authenticated
    USING (
      bucket_id = 'profile-images' AND
      (storage.foldername(name))[1] = auth.uid()::text
    );

  -- Policy to allow users to update their own profile pictures
  CREATE POLICY "Users can update own profile pictures"
    ON storage.objects
    FOR UPDATE
    TO authenticated
    USING (
      bucket_id = 'profile-images' AND
      (storage.foldername(name))[1] = auth.uid()::text
    );

  -- Policy to allow users to delete their own profile pictures
  CREATE POLICY "Users can delete own profile pictures"
    ON storage.objects
    FOR DELETE
    TO authenticated
    USING (
      bucket_id = 'profile-images' AND
      (storage.foldername(name))[1] = auth.uid()::text
    );
COMMIT;

*/